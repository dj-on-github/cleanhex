#!/usr/bin/env python

from __future__ import print_function
from __future__ import division

import sys
from optparse import OptionParser

try:
    import queue
except:
    import Queue as queue

class cleanhex():

    def __init__(self,ofp):
        self.ofp = ofp
        self.queue = queue.Queue()
        self.first_nibble = 1

    def ascii_to_nibble(self,a):
        if a=='0':
            return (True,0)
        if a=='1':
            return (True,1)
        if a=='2':
            return (True,2)
        if a=='3':
            return (True,3)
        if a=='4':
            return (True,4)
        if a=='5':
            return (True,5)
        if a=='6':
            return (True,6)
        if a=='7':
            return (True,7)
        if a=='8':
            return (True,8)
        if a=='9':
            return (True,9)
        if a=='a':
            return (True,10)
        if a=='b':
            return (True,11)
        if a=='c':
            return (True,12)
        if a=='d':
            return (True,13)
        if a=='e':
            return (True,14)
        if a=='f':
            return (True,15)
        if a=='A':
            return (True,10)
        if a=='B':
            return (True,11)
        if a=='C':
            return (True,12)
        if a=='D':
            return (True,13)
        if a=='E':
            return (True,14)
        if a=='F':
            return (True,15)
        return (False,0)

    def get_bytes(self,line):

        #iterate through line pulling pairs of nibbles off
        # and stuff them in the queue as bytes.
        finish = 0
        while ((len(line)>0) and (line[0] != '#')):
            if line[:2] == '0x':
                line = line[2:]
          
            if len(line) > 0: 
                (success, value) = self.ascii_to_nibble(line[0])
                line = line[1:]

                # A little two state state machine for first and second nibbles.
                if (success==True):
                    # We only have the first nibble, so store it.
                    if (self.first_nibble==1):
                        self.first_nibble=0
                        self.nibble = value 
                    else: # We have the first and second nibble. Push a byte.
                        byte = (self.nibble*16) + value
                        self.first_nibble = 1 
                        self.queue.put(byte)

    def get_a_line(self,line):

        self.get_bytes(line.strip())
        bytelist=list()
        while (self.queue.qsize() > 0):
            byte = self.queue.get()
            bytelist.append("%02X" % byte)
        if len(bytelist) > 0:
            if self.ofp:
                self.ofp.writeline("".join(bytelist))
            else:
                print("".join(bytelist))

#Handle the command line options
parser = OptionParser("usage: %prog [options] [filename]")
parser.add_option("-o", "--output", dest="filename",
                  help="Write output to <filename> instead of stdout", metavar="FILE")
parser.add_option("-v", "--verbose",
                  action="store_true", dest="verbose", default=False,
                  help="Show many internal gory details")

(options, args) = parser.parse_args()

if (len(args) == 1):
    infilename = args[0]
    use_stdin = False
    fp = open(infilename,"r")
elif (len(args) > 1):
    print("Too many arguments. Only one input filename needed")
    exit()
else:
    use_stdin == True
    
if options.filename:
    ofp = open(options.filename,"w")
else:
    ofp = None

c = cleanhex(ofp)
if use_stdin:
    for line in sys.stdin:
        c.get_a_line(line)
else:
    for line in fp:
        c.get_a_line(line)


